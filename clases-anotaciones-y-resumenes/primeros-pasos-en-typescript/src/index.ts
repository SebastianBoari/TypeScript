// Clase 1: Introducci√≥n a TypeScript

import { type } from "os";


// |---------------------------------------------------|


// ‚ùìQue es TypeScript?

// Es un lenguaje de programaci√≥n de c√≥digo abierto desarrollado y mantenido por Microsoft. Es un superset est√°ticamente tipado de JavaScript. 
// El tipado est√°tico en TypeScript permite a los desarrolladores especificar los tipos de variables, par√°metros de funciones y el tipo de retorno de las funciones.
// La primera versi√≥n p√∫blica conocida como TypeScript 0.8 fue lanzada en octubre de 2012.


// |---------------------------------------------------|


// üßë‚ÄçüíªEntorno de desarrollo:

// 1- Tener instalado nodejs 
// 2- Tener instalado npm, pnpm o yarn  
// 3- IDE (De tu preferencia)

// |---------------------------------------------------|


// ‚öíÔ∏èüîéInicio y configuracion para trabajar con TypeScript

// 1Ô∏è‚É£ Inicializamos el proyecto:
// npm init -y o npm init y rellenamos los datos del proyecto

// 2Ô∏è‚É£ Las dependencias necesarias para empezar:
// npm install --save-dev @types/node nodemon ts-node typescript

// 3Ô∏è‚É£ Definir un archivo de configuracion tsconfig:
// npx tsc --init --rootDir src --outDir build --esModuleInterop --resolveJsonModule --lib es6 --module commonjs --allowjs true --noImplicitAny true

// No es necesario darle toda esa configuracion desde el comando se puede generar el archivo solo con:
// npx tsc --init -y
// Se generara el archivo tsconfig.json el cual nos ofrece todas las opciones de configuracion con una breve explicacion de lo que hace cada linea.


// 4Ô∏è‚É£ Creamos estructura del proyecto:
// Carpeta src
// nodemon.json (nodemon config)

// 5Ô∏è‚É£ Empaquetador para realizar versiones mas livianas de la build de forma sencilla:
// npm i --save-dev rimraf

// 6Ô∏è‚É£ Scripts a implementar:
/*"scripts": {
    "start": "ts-node .",
    "dev": "nodemon .",
    "trans": "tsc",
    "build:prod": "rimraf ./build && tsc",
    "start:prod": "npm run build:prod && node build/index.js"
}*/


// |---------------------------------------------------|


console.log("Hola Mundo desde TypeScript");

// Esto es un comentario en TS

/*
Esto es otro comentario en TS
Un Comentario Multilinea
*/


// |---------------------------------------------------|


// Clase 2: 

// Declaracion de Variables:
// Las bases de las variales de JavaScript se mantienen intactas en TypeScript.

// Funciona el var
var nombre = "Martin";
// Funciona let
let email = "email@email.com";

// Funciona la concatenacion 
console.log("Hola, " + nombre);
// Funcionan las backticks
console.log(`Como estas ${nombre}?`);

// No se puede reasignar una constante
const PI = 3.1416;
//PI = PI + 1;



// üî¢üìÑEl tipado

// En JavaScript, el tipado es inferido, mientras que en TypeScript podemos definir el tipo o no hacerlo.
// En TypeScript, no es obligatorio definir el tipo de la variable, pero es muy recomendable, como veremos a continuaci√≥n.


// Al definir el tipo de la variable, no nos permite asignar un valor de un tipo distinto al declarado.
/*
let apellido: string = "Martinez";
apellido = 12;
*/
// Sin embargo, si no definimos el tipo de valor en la variable, el tipado se inferir√° en la declaraci√≥n de la variable, y se comportar√° de la misma manera que en el ejemplo anterior:
/*
let direccion = "Calle False 123";
 direccion = 2;
*/


// Si quisieramos permitir que la variable pueda tomar cualquier tipo de valor deberiamos definirlo de la siguiente manera:
/*
let telephone:any = "01199999999";
telephone = 01199999999;
*/
// Hay que tratar de evitar de utilizar any siempre que sea posible. Si vamos a utilizar any tenemos que ser concientes de la raz√≥n por la cual vamos a utilizarlo.


// Si declaramos una variable sin valor
let dni;
// Y luego le asignamos valor vamos a ver que ya no infiere el tipado de la variable y pasa a ser "any". 
dni = false; 
// Tener en cuenta que solo se infiere correctamente el tipado de la variable en su declaraci√≥n. Si al momento de declarar la variable no le asignamos un valor el tipado pasara a ser any.

// Tampoco se puede re-definir el tipado de una variable. Por ejemplo:
/*
let mascota:string = "Max";
mascota:number = "8";
*/


// |---------------------------------------------------|


// Si bien esto parece ser redundante es muy buena practica. Tratemos de mantener siempre definido el tipado de nuestras variables.
let error:boolean = false;

// Que pasar√° si intentamos consologear variables que no son del tipo string?
console.log(`Hay algun error?: ${error}`);
// Al igual que en javascript podemos ver la representacion de la variable como un string.


// |---------------------------------------------------|


// ** Instanciacion multiple de variables

// EN javascript se utiliza mucho, por ende en typescript tambien pero tiene las diferencias que nos podemos imaginar.

let a:string, b:boolean, c:number; // Instancia 3 variables sin valor inicial

a = "TypeScript";
b = true;
c = 8.9; // Aunque sea un float es un number


// |---------------------------------------------------|
 

// ** Factor Spread (Propagacion)

const unObjeto = {
    titulo: "Un titulo",
    precio: 2999,
    stock: 10
};

// En asignacion de variables
let {titulo, precio, stock} = unObjeto;

// En listas
let listaCompraLunes: string[] = ["Pan", "Manteca", "Leche"];
let listaCompraMartes: string[] = [...listaCompraLunes, "Huevos", "Carne"];
let listaCompraMiercoles: string[] = ["Pescado", "Vino"]
let listaCompraSemana: string[] = [...listaCompraLunes, ...listaCompraMiercoles];

// En objetos
let estadoApp = {
    usuario: "admin",
    session: 3,
    jwt: "bear12312837u19823"
}
console.log(estadoApp);
let nuevoEstado = {
    ...estadoApp,
    session: 4
}
console.log(nuevoEstado);


// |---------------------------------------------------|


// ** Tipos primitivos del lenguaje (BuiltIn Types):

// En las estructuras condicionales los tipos de datos se comportan igual que en javascript 
// number, string, boolean, void, null y undefined

// Tipos de datos mas complejos
let taskList: string[] = ["Tarea 1", "Tarea 2"];
let randomTypes: (string | boolean | number)[] = ["Hola", true, 256];

// Mas delante en el curso veremos como crear nuestros propios tipos de datos. 


// |---------------------------------------------------|


// ** Enumerados

// Los enumerados en TypeScript permiten definir un conjunto de valores con nombre. En este caso, se define un enumerado llamado Estados.

// Cada valor en el enumerado puede tener un valor asignado. En este ejemplo, los valores Completado, Incompleto y Pendiente tienen asignados los valores "C", "I" y "P" respectivamente.

// Se declara una variable llamada estadoTarea de tipo Estados, lo que significa que solo puede contener uno de los valores definidos en el enumerado Estados.

// Se asigna el valor Estados.Completado a la variable estadoTarea. Esto significa que estadoTarea contendr√° el valor "C".

// Se imprime el valor de estadoTarea en la consola utilizando console.log(). En este caso, se imprimir√° el valor "C".

enum Estados {
    "Completado" = "C",      // Valor asignado: "C"
    "Incompleto" = "I",     // Valor asignado: "I"
    "Pendiente" = "P"       // Valor asignado: "P"
};
let estadoTarea: Estados = Estados.Completado;  
console.log(estadoTarea);  // Imprime "C" en la consola


// El valor numerico que se le asigna a cada enumerado es autoincremental. Por ejemplo:

enum PuestoDeCarrera {
    "Primero" = 1,      // Valor asignado: 1
    "Segundo",          // Valor asignado: 2 (autoincremental)
    "Tercero"           // Valor asignado: 3 (autoincremental)
};

let puestoMaraton: PuestoDeCarrera = PuestoDeCarrera.Tercero;  
console.log(puestoMaraton);  // Imprime 3 en la consola

// El enumerado PuestoDeCarrera representa los diferentes puestos de una carrera. Los valores num√©ricos asignados a cada elemento del enumerado son autoincrementales. Se comienza asignando expl√≠citamente el valor 1 al primer elemento "Primero", y los siguientes elementos "Segundo" y "Tercero" se les asigna autom√°ticamente el valor siguiente al anterior.

// Ah, esto tambien se puede inferir:
let puestoRally = PuestoDeCarrera.Segundo;
// Pero no es buena practica. Tratemos de definir explicitamente todo lo que podamos:
let puestoF1: PuestoDeCarrera = PuestoDeCarrera.Primero;


// |---------------------------------------------------|


// ** Interface
// En TypeScript tambien tenemos Interfaces

// Una interface, en el contexto de la programaci√≥n, es una estructura que define un conjunto de propiedades y m√©todos que un objeto puede implementar. Sirve como un contrato que establece qu√© funcionalidades debe proporcionar un objeto sin definir su implementaci√≥n espec√≠fica.

// En TypeScript, una interface es una herramienta que permite definir la estructura y el tipo esperado de un objeto. Las interfaces en TypeScript son opcionales y se utilizan principalmente para lograr un tipado m√°s s√≥lido y seguro en el c√≥digo. Al definir una interface, se especifican los nombres y tipos de las propiedades y los par√°metros de los m√©todos que se esperan en un objeto que implemente dicha interface.

// Una vez definida una interface, se puede utilizar para garantizar que un objeto cumpla con esa estructura. Esto significa que cualquier objeto que implemente una interface espec√≠fica debe proporcionar todas las propiedades y m√©todos definidos en la interface. Si un objeto no cumple con los requisitos de la interface, el compilador de TypeScript mostrar√° un error.

// Explicaci√≥n r√°pida: Es como un esquema/modelo de que propiedades y de que tipo de valor deben ser las propiedades de un objeto. Cuando instanciemos un objeto podemos aplicarle ese esquema.

// Declaramos la interfaz que debe tener la variable
interface Tarea {
    nombre: string,
    estado: Estados,
    urgencia: number
};
// Y asi utilizamos la interfaz que acabamos de crear
let tarea1: Tarea = {
    nombre: "Comprar pan",
    estado: Estados.Pendiente,
    urgencia: 10 
};

console.log(`Tarea: ${tarea1.nombre}`); // Imprime "comprar pan" en consola


// |---------------------------------------------------|


// ** Crear Tipos de datos en TypeScript

// Las interfaces se utilizan principalmente para describir la forma de un objeto y se pueden implementar y extender en clases, mientras que los tipos personalizados ofrecen m√°s flexibilidad al permitir la combinaci√≥n de varios tipos existentes. 

// Se crea utilizando la palabra clave type. Permite crear un tipo que puede ser una combinaci√≥n de otros tipos existentes, como tipos primitivos, tipos de objeto, uniones, intersecciones, etc.

type Producto = {
    precio: number,
    nombre: string,
    anio: number
};

let coche: Producto = {
    precio: 30000,
    nombre: "Audi",
    anio: 2010
};

console.log(`Coche: ${coche.nombre}`); // Imprime "Audi" en consola


// |---------------------------------------------------|


//  Al principio puede ser muy confuso cuando usar uno y cuando usar otro y entender la diferencia real entre un tipo y una interfaz pero mas adelante vamos a estar hablando mas sobre el tema para poder saber cuando utilizar tipos y cuando utilizar interfaces hasta que puedan interiorizar los casos de uso de cada uno y entender las diferencias principales.


// |---------------------------------------------------|


// ** Vamos a repasar para acostumbrarnos a como se ven en TypeScript cosas que manejamos de forma seguida en JavaScript

// ** Estructuras condicionales

// En TypeScript funcionan las mismas estructuras condicionales con la misma sintaxis.

// if - else
if(error){
    console.log("Hay un error");
} else {
    console.log("No hay error")
};

// if - else if - else
if(coche.anio < 2010){
    console.log(`Coche: ${coche.nombre} es viejo`);
} else if( coche.anio === 2010){
    console.log(`Coche: ${coche.nombre} es del 2010`);
} else {
    console.log(`Coche: ${coche.nombre} es nuevo`);
};

// Switch
switch (tarea1.estado) {

    case Estados.Completado:
    console.log("La tarea esta completada");      
    break;
    
    case Estados.Incompleto:
    console.log("La tarea no esta completa");
    break;
    
    case Estados.Pendiente:
    console.log("La tarea esta pendiente");
    break;

    default:
    console.log("La tarea fue comprobada");
    break;
};

// Operador ternario
console.log(coche.anio < 2010 ? `Coche: ${coche.nombre} es viejo` : `Coche: ${coche.nombre} es nuevo`)


// ** Bucles

// En TypeScript tambien contamos con bucles y con metodos de arrays como en JavaScript. 

let listaTareasNueva:  Tarea[] = [
    {
        nombre: "Tarea 1",
        estado: Estados.Completado,
        urgencia: 0
    },
    {
        nombre: "Tarea 2",
        estado: Estados.Pendiente,
        urgencia: 5
    },
    {
        nombre: "Tarea 3",
        estado: Estados.Incompleto,
        urgencia: 10
    }
]


// For clasico
for (let index = 0; index < listaTareasNueva.length; index++) {
    const tarea = listaTareasNueva[index];

    console.log(`${index} - ${tarea.nombre}`);
    
};

// For Each
listaTareasNueva.forEach((tarea: Tarea, index: number) => {
    console.log(`${index} - ${tarea.nombre} - ${tarea.urgencia} - ${tarea.estado}`);
});

// While
while (tarea1.estado !== Estados.Completado){
    tarea1.urgencia++;

    if(tarea1.urgencia == 20){
        tarea1.estado = Estados.Completado;
        break;
    };
};

// Tambien Do While, etc etc...


// |---------------------------------------------------|


// Clase 3: Funciones

// La sintaxis es igual a la de JavaScript pero vemos que en los parametros debemos definir el tipado de lo que se va a estar recibiendo.

// Aprovechamos para aclarar algunas buenas practicas mientras mostramos una funcion 

// Es buena practica documentar nuestro codigo. Se documenta de esta forma:
/**
 * Funcion que sirve para saludar 
 * @param nombre Nombre de la persona a saludar
*/
function saludar (nombre: string) {
    console.log(`Hola ${nombre}`);
};

saludar("Sebastian");

// Pero es mucho mejor que el nombre de las funciones sean lo suficientemente descriptivo como para entender que hace solo leyendo el nombre:

function saludarPorConsola (nombre: string){
    console.log(`Hola ${nombre}`);
};

saludarPorConsola("Carlos");
// No necesariamente debemos pasar un string, podemos darle como argumento una variable que contenga un string y tambien va a funcionar
let persona: string = "Jorge";
saludarPorConsola(persona);


// |---------------------------------------------------|


// Parametros opcionales

// Con la sintaxis de nombre: string = "Pepe" estamos indicando que el parametro es opcional y que el valor por defecto que tomara nombre siempre ser√° Pepe
/**
 * Funcion que saluda a una persona que se esta yendo.
 * @param nombre Nombre de la persona a despedir, por defecto sera "Pepe"
 */
function despedirPersona (nombre: string = "Pepe"){
    console.log(`Adios, ${nombre}!`);
};

despedirPersona(); // Devolvera en consola un "Adios, Pepe!"
despedirPersona("Alba"); // Devolvera en consola un "Adios, Alba!"

// Notamos como con la sintaxis nombre?: string le estamos indicando a la funcion que el parametro es opcional
function despedidaOpcional(nombre?: string){
    if(nombre){
        console.log(`Adios, ${nombre}!`);
    } else {
        console.log(`Adios!`);
    };
};
despedidaOpcional();
despedidaOpcional("Marcos");

// Y esto lo podemos aplicar a muchos parametros al mismo tiempo

// Aqui estamos pidiendo de forma obligatoria un nombre, el apellido es opcional y la edad es opcional pero toma valor por defecto 18.
function variosParams (nombre: string, apellido?: string, edad: number = 18){
    if(apellido){
        console.log(`${nombre} ${apellido} tiene ${edad} a√±os.`);
    } else {
        console.log(`${nombre} tiene ${edad} a√±os.`);
    };
};
variosParams("Martin") // Martin tiene 18 a√±os
variosParams("Martin", "San Jose") // Martin San Jose tiene 18 a√±os
variosParams("Martin", "San Jose", 28); // Martin San Jose tiene 38 a√±os
variosParams("Martin", undefined, 30); // Martin tiene 30 a√±os

function variosTipos(a: string | number){
    if(typeof(a) === 'string'){
        console.log("A es un string");
    } else if (typeof(a) === 'number') {
        console.log("A no es un string");
    };
};
variosTipos('hola'); // A es un string
variosTipos(3); // A no es un string


// |---------------------------------------------------|


// Return en TypeScript

// Podemos definir el tipo de datos que puede retornar una funcion con la misma sintaxis que venimos trabajando. Al terminar el parentesis de los parametros ponemos : y los tipos de datos que puede retornar la funcion.

// Van a ver que si intentan retornar un numero en esta funcion va a dar un error
function ejemploReturn(apellido: string, nombre?: string): string{
    return `${nombre} ${apellido}`;
};

// Tambien podemos hacer que pueda retornar un tipo de dato u otro.
function ejemploReturn2(): string | number{
    return 3;
};


// |---------------------------------------------------|


// Multiple Params (Funciones con m√∫ltiples par√°metros)

const lista: string[] = ["Claudia", "Sandra", "Jessica", "Luciana", "Alberto", "Rogelio", "Jorge", "Juan", "Carlos", "Roberto"];

// Esta funci√≥n recibe un array, una lista de nombres que luego itera con un forEach y los muestra en la consola uno por uno.
function ejemploParamLista(nombres: string[]) {
nombres.forEach((nombre) => {
console.log(nombre);
});
}

ejemploParamLista(lista);

// Ahora bien, tambi√©n existe la opci√≥n de que le pasemos m√∫ltiples par√°metros sin especificar cu√°ntos exactamente.
// En esta funci√≥n, utilizamos el operador spread (...) en la declaraci√≥n de par√°metros para indicar que aceptar√° un n√∫mero variable de argumentos. (parametros indefinidos)

function ejemploMultipleParams(...nombres: string[]) {
nombres.forEach((nombre) => {
console.log(nombre);
});
}

// Si bien a simple vista son parecidas las funciones, en esta √∫ltima, gracias al spread operator, podemos pasarle par√°metros de esta forma:

ejemploMultipleParams("Martin");
ejemploMultipleParams("Jose", "Agustina", "Camila");

// |---------------------------------------------------|


// Void

// Pero... ¬øse dieron cuenta de que en estos casos las funciones no retornan nada? Estuvimos hablando reci√©n sobre el retorno en TypeScript y ahora estamos creando funciones que no devuelven ning√∫n valor, sino que solo imprimen datos en la consola.

// En estos casos, las funciones tienen un tipo de retorno VOID.

function funcionVoid(nombre: string): void {
    console.log(nombre);
};

funcionVoid("Alejandro");


// |---------------------------------------------------|


// ‚ùì¬øPor qu√© tipar absolutamente todo?

// Si bien puede parecer tedioso al principio acostumbrarse a tipar absolutamente todo, es una ventaja de TypeScript tener un tipado completo en nuestro c√≥digo.

// ¬øEn qu√© casos es beneficioso? Al documentar una funci√≥n, podemos comprender r√°pidamente qu√© hace y qu√© tipos de datos espera:

/** Retorna el nombre completo de una persona.
@param nombre El nombre de la persona.
@param apellido El apellido de la persona.
@returns El nombre completo de la persona.
*/
function ejDocs(nombre: string, apellido: string): string {
    return `${nombre} ${apellido}`;
};

// Al utilizar la funci√≥n y posicionar el cursor sobre ella, podemos ver claramente qu√© par√°metros debe recibir y qu√© valor devuelve.
    
console.log(ejDocs("Gustavo", "Cerati"));


// |---------------------------------------------------|


// Arrow Functions

// Las arrow functions, tambi√©n conocidas como funciones an√≥nimas, tambi√©n funcionan en TypeScript.

// Aprovecharemos para repasar los tipos personalizados y la anotaci√≥n de tipos de retorno en las funciones.

type Empleado = {
    nombre: string,
    apellidos: string,
    edad: number
};

let empleadoGustavo: Empleado = {
    nombre: "Gustavo",
    apellidos: "Fring",
    edad: 51
};

const mostrarEdadEmpleado = (empleado: Empleado): string => `${empleado.nombre} tiene ${empleado.edad} a√±os`;

console.log(mostrarEdadEmpleado(empleadoGustavo));


// |---------------------------------------------------|


// Callbacks en Arrow Functions

// En TypeScript, las arrow functions tambi√©n se pueden utilizar como callbacks, lo que brinda una forma concisa y expresiva de pasar funciones como argumentos a otras funciones. Veamos un ejemplo:

// Creamos una funci√≥n llamada mapArray que toma un array de n√∫meros y una funci√≥n de callback como argumentos.
// La funci√≥n mapArray itera sobre cada elemento del array y aplica el callback a cada uno, devolviendo un nuevo array con los resultados.

function mapArray(array: number[], callback: (num: number) => number): number[] {

    const newArray: number[] = [];

    for (let i = 0; i < array.length; i++) {
        const result = callback(array[i]);
        newArray.push(result);
    }

    return newArray;
}

// Definimos una arrow function llamada double que duplica un n√∫mero.
const double = (num: number): number => {
    return num * 2;
};

// Definimos un array de n√∫meros.
const numbers: number[] = [1, 2, 3, 4, 5];

// Utilizamos la funci√≥n mapArray pasando el array y la funci√≥n double como callback.

// Esto aplicar√° la funci√≥n double a cada n√∫mero del array y devolver√° un nuevo array con los n√∫meros duplicados.
const doubledNumbers = mapArray(numbers, double);

console.log(doubledNumbers); // Resultado: [2, 4, 6, 8, 10]

// Hemos utilizado una arrow function (double) como callback en la funci√≥n mapArray. La arrow function toma un n√∫mero como argumento y lo duplica.

// Luego, pasamos la funci√≥n double como argumento a mapArray, que se encarga de aplicarla a cada n√∫mero del array y devolver un nuevo array con los n√∫meros duplicados.


// |---------------------------------------------------|


// Asincronismo en TypeScript

// Para trabajar en TypeScript con asincronismo tenemos las funciones async y las funciones generadoras

// Async Functions
async function ejemploAsync(): Promise<string>{
    await "Tarea a completar antes de seguir con la secuencia de instrucciones";
    
    console.log("Tarea completada");

    return "Completado";
};

ejemploAsync().then((res) => {
    console.log(`Respuesta: ${res}`);
}).catch((err) => {
    console.log(`Ha ocurrido un error: ${err}`);
}).finally(()=> console.log("Cola de ejecucion finalizada"));



// Generators (funciones generadoras)

// Las funciones generadoras en TypeScript son una caracter√≠stica poderosa que permite la creaci√≥n de iteradores personalizados. Estas funciones son capaces de generar secuencias de valores utilizando la sintaxis function* en lugar de function.

// La principal ventaja de las funciones generadoras es que nos permiten pausar y reanudar la ejecuci√≥n de la funci√≥n en cualquier momento. Esto significa que podemos generar valores bajo demanda, lo que a su vez nos permite ahorrar recursos y mejorar la eficiencia.

// Las funciones generadoras tambi√©n se utilizan para simplificar el c√≥digo as√≠ncrono. En lugar de utilizar callbacks o promesas, podemos utilizar funciones generadoras junto con el operador yield para hacer que nuestro c√≥digo as√≠ncrono sea m√°s legible y f√°cil de seguir. Esto se logra utilizando una biblioteca como co o utilizando las capacidades nativas de JavaScript a trav√©s de las palabras clave async y await.

function* ejemploGenerator(){
    // yield ---> para emitir valores
    let index = 0;
    
    while(index < 5){
        // Emitimos un valor incrementado
        yield index++
    };
};

// Guardamos la funcion generadora en una variable
let generadora = ejemploGenerator();

// Accedemos a los valores emitidos
console.log(generadora.next().value); // 0
console.log(generadora.next().value); // 1
console.log(generadora.next().value); // 2
console.log(generadora.next().value); // 3
console.log(generadora.next().value); // 4
console.log(generadora.next().value); // Imprime undefined en consola porque el index deja de ser menor a 5.


// Watcher y Worker

// Un watcher es una herramienta que supervisa cambios en archivos de proyectos TypeScript y recompila autom√°ticamente cuando se detecta un cambio, evitando ejecuciones manuales del compilador. 

// Los workers permiten ejecutar c√≥digo en hilos o procesos separados para aprovechar sistemas multi-hilo o multi-proceso, √∫tiles para tareas intensivas en computaci√≥n sin bloquear la interfaz de usuario.

// Worker 

// Esta funcion va a ser la encargada de llamar a la funcion worker
function* watcher(valor: number){
    yield valor; // Emitimos el valor inicial
    yield* worker(valor); // Llamamos a las emisiones del worker para que emita otros valores
    yield valor + 4; // Emitimos el valor final + 10
};

function* worker(valor: number){
    yield valor + 1;
    yield valor + 2;
    yield valor + 3;
};

let generatorSaga = watcher(0);

console.log(generatorSaga.next().value); // 0 (watcher)
console.log(generatorSaga.next().value); // 1 (worker)
console.log(generatorSaga.next().value);// 2 (worker)
console.log(generatorSaga.next().value);// 3 (worker)
console.log(generatorSaga.next().value); // 4 (watcher)

// Una funcion generadora no tiene por que terminar.


// |---------------------------------------------------|


// Sobrecarga de funciones

function mostrarError(error: string | number): void{
    console.log("Ha habido un error: ", error);
};


// |---------------------------------------------------|


// Clase 4: Eventos y persistencia de datos en el navegador

// Persistencia de datos

// 1. LocalStorage: Es un mecanismo de almacenamiento que permite guardar datos en el navegador de forma persistente. Los datos almacenados en LocalStorage no se eliminan autom√°ticamente y estar√°n disponibles incluso despu√©s de cerrar y volver a abrir el navegador.

// 2. SessionStorage: Similar a LocalStorage, SessionStorage tambi√©n permite almacenar datos en el navegador, pero con una diferencia clave: los datos se eliminan al cerrar la ventana o pesta√±a del navegador. Los datos de SessionStorage solo est√°n disponibles durante la sesi√≥n de navegaci√≥n actual.

// 3. Cookies: Las cookies son peque√±os archivos de texto que se almacenan en el navegador. Pueden contener datos como identificadores de sesi√≥n, preferencias del usuario, etc. Las cookies tienen una fecha de caducidad y pueden ser configuradas para tener un alcance espec√≠fico de URL. Esto significa que pueden estar disponibles solo para un dominio o subdominio espec√≠fico.


// Como trabajamos en el LocalStorage en TypeScript?


function guardarLocal(): void{
    localStorage.set("nombre", "Martin");
};
function guardarSession(): void{
    sessionStorage.set("nombre", "Martin");
};


function leerLocal(): void{
    let nombre: string = localStorage.get("nombre");
};
function leerSession(): void{
    let nombre: string = sessionStorage.get("nombre");
};


// Cookies (con cookies-utils)

// Este es un ejemplo con una libreria que encontramos en npmjs pero puede ser cualquier libreria que elijas.

// Tambien se puede hacer de forma nativa pero es algo mas engorroso.

/* 
import { deleteAllCookies, deleteCookie, getCookieValue, setCookie } from 'cookies-utils';

const cookieOptions = {
    name: "usuario", // string,
    value: "Martin", // string,
    maxAge: 10 * 60, // optional number (value in seconds),
    expires: new Date(2099, 10, 1), // optional Date,
    path: "/"
};

// Seteamos la cookie
setCookie(cookieOptions);

// Leer una cookie
getCookieValue("usuario");

// Eliminar la cookie
deleteCookie("usuario");

// Eliminar todas las cookies
deleteAllCookies();
*/


// |---------------------------------------------------|


// Clases en TypeScript

class Temporizador {
    public terminar?: () => void;

    public empezar(): void {
        // Comprobamos que exista la funcion terminar como callback
        setTimeout(() => {
            if(!this.terminar) return;
            // Cuando haya pasado el tiempo, se ejecutara la funcion terminar
            this.terminar();
        }, 10000);
    };
};

const miTemporizador: Temporizador = new Temporizador();

// Definimos la funcion del callback a ejecutar cuando termine el tiempo
miTemporizador.terminar = () => {
    console.log("Evento terminado");
};

// Se inicia el timeout y cuando termine se ejecutara la funcion terminar();
miTemporizador.empezar(); 

// Eliminar la ejecucion de la funcion:
delete miTemporizador.terminar;


// |---------------------------------------------------|


// Clase 5:  Clases y objetos

// Como definimos una clase?

/* (Reemplazado por los imports)
class Curso {
    nombre: string;
    horas: number;

    constructor(nombre: string, horas: number){
        this.nombre = nombre;
        this.horas = horas
    };
};

class Estudiante {
    // Propiedades de clase (variables publicas o privadas)
    nombre: string;
    apellidos?: string;
    cursos: Curso[];

    constructor(nombre: string, cursos: Curso[], apellidos?: string){
        // Inicializamos las propiedades
        this.nombre = nombre;
        if(apellidos){
            this.apellidos = apellidos;
        };
        this.cursos = cursos;
    };
};
*/

import { Curso } from "./models/Curso";
import { Estudiante } from "./models/Estudiante";
import { LISTA_CURSOS } from "./mock/cursos.mock";


// Cramos un curso (Reemplazado por el mock)
// const cursoTypeScript: Curso = new Curso("TypeScript", 15);
// const cursoJavaScript: Curso = new Curso("JavaScript", 20);

const listaCursos: Curso[] = LISTA_CURSOS;

// Creamos un estudiante
const martin: Estudiante = new Estudiante("Martin", listaCursos, "San Jose");

console.log(`${martin.nombre} estudia: `);
martin.cursos.forEach((curso: Curso) => {
    console.log(`${curso.nombre} de ${curso.horas} horas`)
})

// Ejecutando un getter de la clase Estudiante

console.log(martin.horasEstudiadas);
// |---------------------------------------------------|


// Saber la instancia de un objeto/variable

// En TypeScript, puedes utilizar el operador instanceof para verificar la instancia de un objeto o variable. Aqu√≠ tienes un ejemplo de c√≥mo usar instanceof en tu c√≥digo:

// Verificar si martin es una instancia de la clase Estudiante
if (martin instanceof Estudiante){
    console.log("martin es un objeto de la clase Estudiante");
}else{
    console.log("martin no es un objeto de la clase Estudiante");
};
  
// Verificar si cursoTypeScript es una instancia de la clase Curso
/*
if(cursoTypeScript instanceof Curso){
    console.log("cursoTypeScript es un objeto de la clase Curso");
}else{
    console.log("cursoTypeScript no es un objeto de la clase Curso");
};
*/
// Se utiliza instanceof para verificar si martin es una instancia de la clase Estudiante y si cursoTypeScript es una instancia de la clase Curso. Dependiendo del resultado, se mostrar√° un mensaje en la consola.


// |---------------------------------------------------|


// Clase 6: Herencia, polimorfismo, decoradores e interfaces


import { Trabajador } from "./models/Persona";
import { Jefe } from "./models/Persona";

let empleado1 = new Trabajador("Martin", "San Jose", 30, 2000);
let empleado2 = new Trabajador("Pepe", "Garcia", 31, 1000);
let empleado3 = new Trabajador("Juan", "Perez", 34, 3000);

empleado1.saludar();

let jefe = new Jefe("Pablo", "Garcia", 50);

jefe.empleados.push(empleado1, empleado2, empleado3);

jefe.empleados.forEach((empleado: Trabajador) => {
    empleado.saludar();
});


// |---------------------------------------------------|


// Interfaces

import { InterfaceTarea } from './models/interfaces/tarea.interface';
import { Nivel } from './models/interfaces/tarea.interface';
import { Programar } from "./models/Programar";

let programar: InterfaceTarea = {
    titulo: "Programar en TypeScript",
    descripcion: "Practicar con Katas para aprender a desarrollar con TS",
    completada: false,
    urgencia: Nivel.Urgente,
    resumen: function (): string {
        return `${this.titulo} - ${this.completada}`;
    }
};

console.log(programar.resumen());

// Tarea de Programacion (implementa InterfaceTarea)

let programarTS = new Programar("TypeScript", "Tarea de programacion en TS", false, Nivel.Bloqueante);

console.log(programarTS.resumen());

// Es importante que nos familiaricemos con los conceptos de types, classes e interfaces.

// type: es una manera de definir un tipo propio y personalizado que no llega a la complejidad de una clase. No requiere crear instancias, constructores ni m√©todos. Simplemente son tipos de datos un poco m√°s complejos que un String o un objeto normal.

// interface: se utiliza para definir la estructura y los atributos que queremos que tenga un objeto. Tambi√©n podemos definir m√©todos obligatorios en una interfaz.

// classes: son una forma de implementar interfaces, m√©todos y atributos m√°s complejos. Las clases nos permiten crear objetos a partir de un modelo definido por la interfaz.

// Igualmente, a lo largo de los cursos de AngularJS y ReactJS, profundizaremos en estos conceptos de manera constante.


// |---------------------------------------------------|


// Decoradores Experimentales

// Basicamente son funciones declaradas a traves de un simbolo: @

// Tenemos decoradores para: 

// - Clases
// - Parametros
// - Metodos
// - Propiedades

// Se pueden utilizar para a√±adir informacion, propiedades extras a un metodo...

function Override(label: string) {
    return function (target: any, key: string) {

        let value: string = target[key];

        const getter = () => label;

        const setter = (newValue: string) => {
        value = newValue;
        };

        Object.defineProperty(target, key, {
            configurable: false,
            get: getter,
            set: setter,
        });
    };
};
  
class PruebaDecorador {
    @Override("Prueba")
    nombre: string = "Martin";
};
  
let prueba = new PruebaDecorador();
console.log(prueba.nombre); // Imprime "Prueba"


  
// Otra funcion para usarla como decorador

function SoloLectura(target: any, key: string) {
    let value: string = target[key];

    const descriptor: PropertyDescriptor = {
        configurable: false,
        get: () => value,
        set: (newValue: string) => {
        throw new Error(`La propiedad '${key}' es de solo lectura.`);
        },
    };

    Object.defineProperty(target, key, descriptor);
}
  
class PruebaSoloLectura {
    @SoloLectura
    nombre: string = '';
}
  
// let pruebaLectura = new PruebaSoloLectura();

// pruebaLectura.nombre = "Martin"; // Lanza un error en tiempo de ejecuci√≥n

// console.log(pruebaLectura.nombre); // Imprime el valor inicial, '' (cadena vac√≠a)


// Decorador para parametros de un metodo

function mostrarPosicion(target: any, propertyKey: string,  parameterIndex: number){
    console.log("Posicion", parameterIndex);
};

class PruebaMetodoDecorador {
    prueba(a: string, @mostrarPosicion b: boolean){
        console.log(b);
    };

};

// Usamos el metodo con el parametro y su decorador
new PruebaMetodoDecorador().prueba("Hola", false);


// |---------------------------------------------------|


// Clase 7: Patrones de dise√±o

// ¬øQu√© son los patrones de dise√±o y c√≥mo se aplican en el desarrollo de software?

// Los patrones de dise√±o son soluciones probadas y comprobadas que se utilizan en el mundo del desarrollo de software para abordar problemas comunes y mejorar la estructura, la flexibilidad y la eficiencia de un sistema. Estos patrones representan enfoques pr√°cticos y pr√°cticas recomendadas que han sido desarrollados y refinados a lo largo del tiempo por expertos en la industria.


// ¬øCu√°l es la utilidad principal de los patrones de dise√±o en el desarrollo de software?

// La utilidad de los patrones de dise√±o radica en su capacidad para proporcionar soluciones estandarizadas a problemas recurrentes en el desarrollo de software. Al utilizar patrones de dise√±o, los desarrolladores pueden aprovechar el conocimiento colectivo de la comunidad de desarrollo y evitar reinventar la rueda en cada proyecto. Adem√°s, los patrones de dise√±o promueven la reutilizaci√≥n del c√≥digo, mejoran la mantenibilidad del software y facilitan la colaboraci√≥n entre equipos de desarrollo.


// ¬øCu√°les son las recomendaciones clave al utilizar patrones de dise√±o?

// Es importante tener en cuenta algunas recomendaciones al utilizar patrones de dise√±o. Primero, es fundamental comprender el contexto y el prop√≥sito del patr√≥n antes de aplicarlo. Cada patr√≥n tiene su caso de uso espec√≠fico y aplicarlo de manera indiscriminada puede resultar contraproducente. Adem√°s, es crucial mantener un equilibrio entre la flexibilidad y la complejidad. No siempre es necesario utilizar patrones complejos si una soluci√≥n m√°s simple puede lograr el mismo resultado.


// ¬øCu√°les son los puntos d√©biles asociados con el uso de patrones de dise√±o?

// Sin embargo, tambi√©n existen algunos puntos d√©biles asociados con el uso de patrones de dise√±o. El principal desaf√≠o radica en la necesidad de comprender y aplicar correctamente los patrones. Algunos patrones pueden ser dif√≠ciles de entender y aplicar correctamente, lo que puede llevar a errores y a un c√≥digo m√°s complicado. Adem√°s, es importante recordar que los patrones de dise√±o no son una bala de plata y no deben considerarse como la soluci√≥n a todos los problemas de dise√±o. Cada proyecto es √∫nico y requiere un enfoque personalizado.


// ¬øCu√°les son los aspectos importantes a tener en cuenta al utilizar patrones de dise√±o en un proyecto?

// Es fundamental tener en cuenta algunos aspectos importantes al utilizar patrones de dise√±o. En primer lugar, los patrones deben aplicarse con prudencia y moderaci√≥n. No todos los problemas requieren la aplicaci√≥n de un patr√≥n de dise√±o, y a veces una soluci√≥n m√°s simple es suficiente. Adem√°s, es esencial mantener la legibilidad y la claridad del c√≥digo. A veces, el uso excesivo de patrones de dise√±o puede hacer que el c√≥digo sea m√°s dif√≠cil de entender y mantener.


// ¬øCu√°les son algunos mitos comunes sobre los patrones de dise√±o y c√≥mo desmitificarlos?

// Es importante desmitificar algunos conceptos err√≥neos comunes sobre los patrones de dise√±o. Algunas personas pueden creer que los patrones de dise√±o son solo para desarrolladores experimentados o que solo se aplican a sistemas grandes y complejos. Sin embargo, los patrones de dise√±o son herramientas √∫tiles para todo tipo de proyectos y pueden beneficiar tanto a desarrolladores novatos como a expertos. Adem√°s, los patrones de dise√±o no deben considerarse como soluciones definitivas, sino como gu√≠as flexibles que pueden adaptarse a diferentes contextos y requisitos.


// ¬øCu√°les son los aciertos principales de utilizar patrones de dise√±o en el desarrollo de software?

// El uso de patrones de dise√±o tiene muchos aciertos y ventajas. En primer lugar, los patrones de dise√±o ayudan a mejorar la modularidad y la reutilizaci√≥n del c√≥digo. Al seguir los principios de dise√±o de los patrones, los desarrolladores pueden escribir c√≥digo m√°s limpio y estructurado, lo que facilita su comprensi√≥n y mantenimiento a largo plazo. Adem√°s, los patrones de dise√±o fomentan la extensibilidad y la flexibilidad del software, lo que permite adaptarse a cambios futuros con mayor facildad. Los patrones de dise√±o tambi√©n promueven la escalabilidad del software, permitiendo que los sistemas crezcan de manera ordenada y eficiente a medida que se agregan nuevas funcionalidades.


// ¬øCu√°les son las ventajas clave de aplicar patrones de dise√±o en un proyecto?

// Otra ventaja de utilizar patrones de dise√±o es la mejora en la comunicaci√≥n y la colaboraci√≥n entre equipos de desarrollo. Los patrones de dise√±o proporcionan un vocabulario com√∫n y una base de conocimiento compartida, lo que facilita la comprensi√≥n y el intercambio de ideas entre los miembros del equipo. Esto contribuye a una mayor coherencia en el c√≥digo y a un desarrollo m√°s r√°pido y eficiente.


// ¬øCu√°les son los desaf√≠os en la comunicaci√≥n y colaboraci√≥n al utilizar patrones de dise√±o?

// Adem√°s, los patrones de dise√±o permiten abordar problemas complejos de manera estructurada y sistem√°tica. Proporcionan soluciones probadas y refinadas que han sido validadas por la comunidad de desarrollo a lo largo del tiempo. Al utilizar patrones de dise√±o, los desarrolladores pueden confiar en enfoques que han demostrado ser exitosos en situaciones similares, lo que reduce el riesgo de errores y problemas inesperados.


// ¬øC√≥mo se debe adaptar y aplicar correctamente un patr√≥n de dise√±o en un proyecto espec√≠fico?

// Es importante mencionar que los patrones de dise√±o no son una soluci√≥n √∫nica y definitiva para todos los problemas de desarrollo de software. Cada proyecto tiene sus propias caracter√≠sticas y requisitos, y los patrones de dise√±o deben aplicarse de manera inteligente y adaptarse al contexto espec√≠fico. Es fundamental comprender los principios detr√°s de cada patr√≥n y evaluar cuidadosamente si es apropiado y beneficioso para el proyecto en cuesti√≥n.


// Patrones Creacionales:

//Los patrones creacionales se centran en los mecanismos de creaci√≥n de objetos. Estos patrones proporcionan soluciones para la creaci√≥n de objetos de manera flexible y eficiente, fomentando la reutilizaci√≥n del c√≥digo. Al utilizar patrones creacionales, los desarrolladores pueden crear instancias de objetos de forma din√°mica, lo que les brinda mayor control y flexibilidad en la construcci√≥n de sistemas. Estos patrones tambi√©n ayudan a encapsular los detalles de creaci√≥n de objetos, lo que facilita la evoluci√≥n y el mantenimiento del c√≥digo.

// Patrones Estructurales:

// Los patrones estructurales se centran en la eficiencia y flexibilidad de la estructura a la hora de definir clases y objetos. Estos patrones proporcionan soluciones para organizar y relacionar clases y objetos de manera eficiente, permitiendo que el sistema evolucione sin afectar su estructura subyacente. Estos patrones ayudan a mejorar la claridad y la legibilidad del c√≥digo, as√≠ como a reducir la dependencia entre clases. Al utilizar patrones estructurales, los desarrolladores pueden lograr un dise√±o m√°s flexible y adaptable, facilitando futuras modificaciones y extensiones del sistema.

// Patrones de Comportamiento:

// Los patrones de comportamiento se centran en la asignaci√≥n efectiva de responsabilidades entre objetos y en la comunicaci√≥n efectiva entre ellos. Estos patrones proporcionan soluciones para definir c√≥mo los objetos interact√∫an y colaboran entre s√≠ para lograr un comportamiento espec√≠fico. Al utilizar patrones de comportamiento, los desarrolladores pueden mejorar la modularidad y la flexibilidad del sistema, ya que cada objeto se enfoca en una responsabilidad espec√≠fica. Estos patrones tambi√©n promueven la comunicaci√≥n clara y efectiva entre objetos, lo que facilita el intercambio de informaci√≥n y la coordinaci√≥n de acciones.

// Cada tipo de patr√≥n (creacional, estructural y de comportamiento) aborda diferentes aspectos del desarrollo de software y ofrece soluciones espec√≠ficas para problemas comunes. La comprensi√≥n de estos patrones y su aplicaci√≥n adecuada en el dise√±o de software puede llevar a sistemas m√°s flexibles, reutilizables y f√°ciles de mantener. Al utilizar patrones creacionales, los desarrolladores pueden crear objetos de manera din√°mica, mejorar la reutilizaci√≥n del c√≥digo y adaptarse a diferentes escenarios. Los patrones estructurales permiten organizar y relacionar clases y objetos de manera eficiente, facilitando futuras modificaciones y extensiones. Por √∫ltimo, los patrones de comportamiento ayudan a asignar responsabilidades claras entre objetos y a establecer una comunicaci√≥n efectiva para lograr un comportamiento deseado.

// Es importante destacar que el uso adecuado de los patrones requiere comprender el contexto y los requisitos del proyecto. No todos los patrones son aplicables en todas las situaciones, y su uso excesivo o incorrecto puede complicar el c√≥digo y dificultar su mantenimiento. Los patrones de dise√±o son herramientas poderosas, pero deben utilizarse con prudencia y considerando las necesidades espec√≠ficas del proyecto en cuesti√≥n.

// Ejemplo:

// Recomendamos esta lectura: https://refactoring.guru/es/design-patterns

// Patrones Creacionales:

// SINGLETON
import { Singleton } from "./patterns/Singleton";

const miPrimerSingleton = Singleton.getInstance();
const miSegundoSingleton = Singleton.getInstance();

// Comrpueba si ambos son iguales
if(miPrimerSingleton === miSegundoSingleton){
    console.log("Singleton funciona correctamente, ambas variables contienen la misma instancia.");
} else {
    console.log("Singleton fallo, las instancias son distintas");
};

