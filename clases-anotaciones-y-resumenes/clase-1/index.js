// Clase 1: Introducci√≥n a TypeScript


// |---------------------------------------------------|


// ‚ùìQue es TypeScript?

// Es un lenguaje de programaci√≥n de c√≥digo abierto desarrollado y mantenido por Microsoft. Es un superset est√°ticamente tipado de JavaScript. 
// El tipado est√°tico en TypeScript permite a los desarrolladores especificar los tipos de variables, par√°metros de funciones y el tipo de retorno de las funciones.
// La primera versi√≥n p√∫blica conocida como TypeScript 0.8 fue lanzada en octubre de 2012.


// |---------------------------------------------------|


// üßë‚ÄçüíªEntorno de desarrollo:

// 1- Tener instalado nodejs 
// 2- Tener instalado npm, pnpm o yarn  
// 3- IDE (De tu preferencia)

// |---------------------------------------------------|


// ‚öíÔ∏èüîéInicio y configuracion para trabajar con TypeScript

// 1Ô∏è‚É£ Inicializamos el proyecto:
// npm init -y o npm init y rellenamos los datos del proyecto

// 2Ô∏è‚É£ Las dependencias necesarias para empezar:
// npm install --save-dev @types/node nodemon ts-node typescript

// 3Ô∏è‚É£ Definir un archivo de configuracion tsconfig:
// npx tsc --init --rootDir src --outDir build --esModuleInterop --resolveJsonModule --lib es6 --module commonjs --allowjs true --noImplicitAny true

// No es necesario darle toda esa configuracion desde el comando se puede generar el archivo solo con:
// npx tsc --init -y
// Se generara el archivo tsconfig.json el cual nos ofrece todas las opciones de configuracion con una breve explicacion de lo que hace cada linea.


// 4Ô∏è‚É£ Creamos estructura del proyecto:
// Carpeta src
// nodemon.json (nodemon config)

// 5Ô∏è‚É£ Empaquetador para realizar versiones mas livianas de la build de forma sencilla:
// npm i --save-dev rimraf

// 6Ô∏è‚É£ Scripts a implementar:
/*"scripts": {
    "start": "ts-node .",
    "dev": "nodemon .",
    "trans": "tsc",
    "build:prod": "rimraf ./build && tsc",
    "start:prod": "npm run build:prod && node build/index.js"
}*/


// |---------------------------------------------------|


// üôã‚Äç‚ôÇÔ∏èFin de la clase uno, ya nos queda una demo, una plantilla, en la cual seguir trabajando las clases posteriores e ir agregando conceptos propios de TypeScript.